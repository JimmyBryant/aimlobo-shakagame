// functions
function hide(element) {
    element.style.display = "none";
}

function displayFlex(element) {
    element.style.display = "flex";
}

function displayBlock(element) {
    element.style.display = "block";
}

function displayGrid(element) {
    element.style.display = "grid";
}

function clickDisplayBlock(trigger, target) {
    trigger.addEventListener('click', () => displayBlock(target));
}

function clickDisplayFlex(trigger, target) {
    trigger.addEventListener('click', () => displayFlex(target));
}

function clickDisplayGrid(trigger, target) {
    trigger.addEventListener('click', () => displayGrid(target));
}

function clickHide(trigger, target) {
    trigger.addEventListener('click', () => hide(target));
}

//toggle mobile menu
function clickToggleMobileMenu() {
    const menuIcon = document.querySelector('.menu-icon');
    const menu = document.querySelector('.menu');

    menuIcon.addEventListener('click', function (event) {
        menu.classList.toggle('active');
        event.stopPropagation();
    });
}

// toggle popupTips: ÂåÖË£πÂú®tips_icon‰∏ãËæπÔºåÁÇπÂáª.tips_iconÂêéÊòæÁ§∫
function clickTogglePopupTips() {
    const tipsIcons = document.querySelectorAll('.tips_icon');
    for (const tipsIcon of tipsIcons) {
        const popupTips = tipsIcon.querySelector('.popup_tips');
        const btnGetIt = popupTips.querySelector('.btn_get_it');

        clickDisplayFlex(tipsIcon, popupTips);
        btnGetIt.addEventListener('click', (event) => {
            hide(popupTips);
            event.stopPropagation(); // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°
        });   
      }
}

// toggle popupInfoBtn: ÂåÖË£πÂú®info_icon_btn‰∏ãËæπÔºå‰∏éinfo_iconÁöÑÂå∫Âà´ÊòØÈúÄË¶ÅÁî®Êà∑ÁÇπÂáªÊåâÈíÆÊù•ÂÖ≥Èó≠‰ø°ÊÅØ
function clickTogglePopupInfoBtn() {
    const InfoIconsBtn = document.querySelectorAll('.info_icon_btn');
    for (const InfoIconBtn of InfoIconsBtn) {
        const popupTips = InfoIconBtn.querySelector('.popup_tips');
        const btnGetIt = popupTips.querySelector('.btn_get_it');

        clickDisplayFlex(InfoIconBtn, popupTips);
        btnGetIt.addEventListener('click', (event) => {
            hide(popupTips);
            event.stopPropagation(); // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°
        });   
      }
}

// toggle popupInfo: ÂåÖË£πÂú®info_icon‰∏ãËæπÔºåÂ±ïÁ§∫‰ø°ÊÅØ3sÂêéÂÖ≥Èó≠
function clickOpenPopupInfo() {
    const infoIcons = document.querySelectorAll('.info_icon');
    for (const infoIcon of infoIcons) {
        const popupInfo = infoIcon.querySelector('.popup_info');
        infoIcon.addEventListener('click', (event) => {
            displayFlex(popupInfo);
            event.stopPropagation(); // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°
            setTimeout(() => hide(popupInfo), 3000);
        });
        
      }
}

// ÂºπÂá∫‰∏ÄÊúµÁé´Áë∞Ëä±
clickOpenPopupRose();
function clickOpenPopupRose() {
    const roseIcon = document.querySelector('.rose_icon');

    if (roseIcon) {
        const popupRose = roseIcon.querySelector('.popup_rose');

        clickDisplayFlex(roseIcon, popupRose);
        fillContentRose();
        popupRose.addEventListener('click', (event) => {
            hide(popupRose);
            event.stopPropagation(); // ÈòªÊ≠¢‰∫ã‰ª∂ÂÜíÊ≥°
        });
    }
}

// Â°´ÂÖÖÁé´Áë∞Ëä±Âà∞ÁΩëÈ°µ
function fillContentRose() {
    const contentRose = document.querySelector('.content_rose');
    
    if (contentRose) {
        
        const canvas = contentRose.querySelector('.canvas_rose');
        canvas.innerHTML = '';
        
        var c = canvas;
        var a = c.getContext('2d');
        c.width = c.height = f = 600;
        var h = -250;
        document.body.clientWidth; 

        with(m=Math)C=cos,S=sin,P=pow,R=random;

        function p(a, b, c) {
            if (c > 60) return [S(a * 7) * (13 + 5 / (.2 + P(b * 4, 4))) - S(b) * 50, b * f + 50, 625 + C(a * 7) * (13 + 5 / (.2 + P(b * 4, 4))) + b * 400, a * 1 - b / 2, a];
            A = a * 2 - 1;
            B = b * 2 - 1;
            if (A * A + B * B < 1) {
                if (c > 37) {
                    n = (j = c & 1) ? 6 : 4;
                    o = .5 / (a + .01) + C(b * 125) * 3 - a * 300;
                    w = b * h;
                    return [o * C(n) + w * S(n) + j * 610 - 390, o * S(n) - w * C(n) + 550 - j * 350, 1180 + C(B + A) * 99 - j * 300, .4 - a * .1 + P(1 - B * B, -h * 6) * .15 - a * b * .4 + C(a + b) / 5 + P(C((o * (a + 1) + (B > 0 ? w : -w)) / 25), 30) * .1 * (1 - B * B), o / 1e3 + .7 - o * w * 3e-6];
                }
                if (c > 32) {
                    c = c * 1.16 - .15;
                    o = a * 45 - 20;
                    w = b * b * h;
                    z = o * S(c) + w * C(c) + 620;
                    return [o * C(c) - w * S(c), 28 + C(B * .5) * 99 - b * b * b * 60 - z / 2 - h, z, (b * b * .3 + P((1 - (A * A)), 7) * .15 + .3) * b, b * .7];
                }
                o = A * (2 - b) * (80 - c * 2);
                w = 99 - C(A) * 120 - C(b) * (-h - c * 4.9) + C(P(1 - b, 7)) * 50 + c * 2;
                z = o * S(c) + w * C(c) + 700;
                return [o * C(c) - w * S(c), B * 99 - C(P(b, 7)) * 50 - c / 3 - z / 1.35 + 450, z, (1 - b / 1.2) * .9 + a * .1, P((1 - b), 20) / 4 + .05];
            }
        }

        setInterval(function () {
            for (i = 0; i < 1e4; i++) {
                if (s = p(R(), R(), i % 46 / .74)) {
                    z = s[2];
                    x = ~~(s[0] * f / z - h);
                    y = ~~(s[1] * f / z - h);
                    if (!m[q = y * f + x] | m[q] > z) {
                        m[q] = z;
                        a.fillStyle = "rgb(" + ~(s[3] * h) + "," + ~(s[4] * h) + "," + ~(s[3] * s[3] * -80) + ")";
                        a.fillRect(x, y, 1, 1);
                    }
                }
            }
        }, 0);
    }
}




// ËÆ©Áî®Êà∑ÂèØ‰ª•ÈÄöËøáÁÇπÂáªpopup box‰πãÂ§ñÁöÑÂú∞ÊñπÊù•ÂÖ≥Èó≠popup box.
window.onclick = function (event) {
    const popupBoxs = document.querySelectorAll('.popup_box');
    for (const popupBox of popupBoxs) {
        if (event.target == popupBox) {
            hide(popupBox);
          }
    }
  };


// ËÆ©Áî®Êà∑ÂèØ‰ª•ÈÄöËøáÁÇπÂáªbtn_get_it_no_affect‰πãÂ§ñÁöÑÂú∞ÊñπÊù•ÂÖ≥Èó≠popup box.
window.onclick = function (event) {
    const popupBoxs = document.querySelectorAll('.popup_box');
    for (const popupBox of popupBoxs) {
        if (event.target == popupBox) {
            hide(popupBox);
          }
    }
  };

// Áî®Êà∑ÁÇπÂáªÂàÜ‰∫´ÊåâÈíÆ,Â§çÂà∂Êú¨ÁΩëÁ´ôÁöÑÁΩëÂùÄÔºåÂèØ‰ª•‰∏™ÊÄßÂåñ‰∏ÄÁÇπÔºöÈ¶ñÂÖàÊòØÂ§çÂà∂ÂÜÖÂÆπÂà∞Ââ™Ë¥¥ÊùøÔºåÁÑ∂ÂêéÂºπÂá∫ÊèêÁ§∫Ê°ÜÔºåÂπ∂Áªô‰∫à2ÁÇπÂπ∏ËøêÂÄºÂ•ñÂä±
function clickShareButton() {
    const shareButton = document.querySelector('.btn_share');
    
    if (shareButton) {
        shareButton.addEventListener('click', function() {
            const lastClickTime = localStorage.getItem('last_click_share_button');
            const currentTime = new Date().getTime();

            shareThisSite();

            // Ê£ÄÊü•Êó∂Èó¥Èó¥ÈöîÔºåË∂ÖËøá1ÂàÜÈíüÊâçÁªôÁßØÂàÜ
            if (!lastClickTime || (currentTime - lastClickTime) > 60000) {
                updateTotalLuckyPoint(2);
                writeEventLogLuckyPoint('click share button', 2);
                // Êõ¥Êñ∞Êú¨Âú∞Â≠òÂÇ®ÁöÑÁÇπÂáªÊó∂Èó¥
                writeToLocalStorage('last_click_share_button', currentTime);
            }
        });
    }
}

clickShareButton();


function copyToClipboard(text) {
    navigator.clipboard.writeText(text);
}

function shareThisSite() {
    const enCopyContent = "Check this out! üöÄ Visit aimlobo.com for amazing content!";
    const zhCnCopyContent = "ÊàëÂàöÂèëÁé∞‰∫Ü‰∏Ä‰∏™ÊúâË∂£ÁöÑÁΩëÁ´ôÔºÅüöÄ ËÆøÈóÆ aimlobo.com Ëé∑ÂèñÁ≤æÂΩ©ÂÜÖÂÆπÔºÅ";
    const zhTwCopyContent = "ÊàëÂâõÁôºÁèæ‰∫Ü‰∏ÄÂÄãÊúâË∂£ÁöÑÁ∂≤Á´ôÔºÅüöÄ Ë®™Âïè aimlobo.com Áç≤ÂèñÁ≤æÂΩ©ÂÖßÂÆπÔºÅ";

    const lang = getLanguageFromUrl(); // Ëé∑ÂèñÂΩìÂâçËØ≠Ë®ÄÔºå‰æãÂ¶Ç 'en', 'zh-cn', 'zh-tw'

    let textToCopy = '';

    switch (lang) {
        case 'en':
            textToCopy = enCopyContent;
            break;
        case 'zh-cn':
            textToCopy = zhCnCopyContent;
            break;
        case 'zh-tw':
            textToCopy = zhTwCopyContent;
            break;
        default:
            textToCopy = enCopyContent; // ÈªòËÆ§‰ΩøÁî®Ëã±ÊñáÂÜÖÂÆπ
    }

    copyToClipboard(textToCopy);
}

// Áî®Êà∑ÁÇπÂáªÈòÖËØª+1, topic single
clickReadPlusOneButton();
function clickReadPlusOneButton() {
    const btn = document.querySelector('.btn_read_plus_one');
    
    if (btn) {
        btn.addEventListener('click', function() {
            const lastClickTime = localStorage.getItem('last_click_read_plus_one_button');
            const currentTime = new Date().getTime();

            // Ê£ÄÊü•Êó∂Èó¥Èó¥ÈöîÔºåË∂ÖËøá1ÂàÜÈíü‰πãÂêéÁöÑÁÇπÂáªÊâç‰ºöÂÜçÊ¨°ËÆ°ÂÖ•ÈòÖËØªÊ¨°Êï∞
            if (!lastClickTime || (currentTime - lastClickTime) > 60000) {
                updateReadTime(1);
                updatePageUserReadTime();
                // Êõ¥Êñ∞Êú¨Âú∞Â≠òÂÇ®ÁöÑÁÇπÂáªÊó∂Èó¥
                writeToLocalStorage('last_click_read_plus_one_button', currentTime);
            }
        });
    }
}

// Áî®Êà∑ÁÇπËµû, topic single
clickLikeButton();
function clickLikeButton() {
    const btn = document.querySelector('.btn_like');
    
    if (btn) {
        btn.addEventListener('click', function() {
            const lastClickTime = localStorage.getItem('last_click_like_button');
            const currentTime = new Date().getTime();

            // Ê£ÄÊü•Êó∂Èó¥Èó¥ÈöîÔºåË∂ÖËøá1ÂàÜÈíü‰πãÂêéÁöÑÁÇπÂáªÊâç‰ºöÂÜçÊ¨°ËÆ°ÂÖ•ÈòÖËØªÊ¨°Êï∞
            if (!lastClickTime || (currentTime - lastClickTime) > 60000) {
                updateTotalLuckyPoint(0.5);
                writeEventLogLuckyPoint('click like button', 0.5)
                // Êõ¥Êñ∞Êú¨Âú∞Â≠òÂÇ®ÁöÑÁÇπÂáªÊó∂Èó¥
                writeToLocalStorage('last_click_like_button', currentTime);
            }
        });
    }
}




clickToggleMobileMenu();
clickTogglePopupTips();
clickTogglePopupInfoBtn();
clickOpenPopupInfo();

// ÁøªËØëÂÜÖÂÆπÔºåÂâçËæπÊòØidÔºåÂêéËæπÊòØÂØπÂ∫îËØ≠ÁßçÁöÑÁøªËØëÂÜÖÂÆπ
const i18n = {
    game: {
        'en': 'game',
        'zh-cn': 'Ê∏∏Êàè',
        'zh-tw': 'ÈÅäÊà≤'
    },
    read: {
        'en': 'read',
        'zh-cn': 'ÈòÖËØª',
        'zh-tw': 'Èñ±ËÆÄ'
    },
    personalized_signature: {
        'en': 'personalized signature',
        'zh-cn': '‰∏™ÊÄßÁ≠æÂêç',
        'zh-tw': 'ÂÄãÊÄßÁ∞ΩÂêç'
    },
    username: {
        'en': 'username',
        'zh-cn': 'Áî®Êà∑Âêç',
        'zh-tw': 'Áî®Êà∂Âêç'
    },
    happy: {
        'en': 'happy',
        'zh-cn': 'Âø´‰πê',
        'zh-tw': 'Âø´Ê®Ç'
    },
    exercise: {
        'en': 'exercise',
        'zh-cn': 'ËøêÂä®',
        'zh-tw': 'ÈÅãÂãï'
    },
    sports: {
        'en': 'sports',
        'zh-cn': 'ËøêÂä®',
        'zh-tw': 'ÈÅãÂãï'
    },
    dating: {
        'en': 'dating',
        'zh-cn': 'Á∫¶‰ºö',
        'zh-tw': 'Á¥ÑÊúÉ'
    },
    laugh: {
        'en': 'laugh',
        'zh-cn': 'Â§ßÁ¨ë',
        'zh-tw': 'Â§ßÁ¨ë'
    },
    rich: {
        'en': 'rich',
        'zh-cn': 'Êö¥ÂØå',
        'zh-tw': 'Êö¥ÂØå'
    },
    match: {
        'en': 'match',
        'zh-cn': 'ÈÖçÂØπ',
        'zh-tw': 'ÈÖçÂ∞ç'
    },
    healthy: {
        'en': 'healthy',
        'zh-cn': 'ÂÅ•Â∫∑',
        'zh-tw': 'ÂÅ•Â∫∑'
    },
    show_love: {
        'en': 'Show love',
        'zh-cn': 'Ë°®ÁôΩ',
        'zh-tw': 'Ë°®ÁôΩ'
    },
    cry: {
        'en': 'cry',
        'zh-cn': 'Âì≠Ê≥£',
        'zh-tw': 'Âì≠Ê≥£'
    },
    sad: {
        'en': 'sad',
        'zh-cn': 'ÈöæËøá',
        'zh-tw': 'Èõ£ÈÅé'
    },
    disappointment: {
        'en': 'disappointment',
        'zh-cn': 'Â§±Êúõ',
        'zh-tw': 'Â§±Êúõ'
    },
    poor: {
        'en': 'poor',
        'zh-cn': 'Ë¥´Á©∑',
        'zh-tw': 'Ë≤ßÁ™Æ'
    },
    squabble: {
        'en': 'squabble',
        'zh-cn': '‰∫âÂêµ',
        'zh-tw': 'Áà≠Âêµ'
    },
    fight: {
        'en': 'fight',
        'zh-cn': 'ÊâìÊñó',
        'zh-tw': 'ÊâìÊñó'
    },
    mad: {
        'en': 'mad',
        'zh-cn': 'ÁîüÊ∞î',
        'zh-tw': 'ÁîüÊ∞£'
    },
    waste_time: {
        'en': 'waste time',
        'zh-cn': 'Êµ™Ë¥πÊó∂Èó¥',
        'zh-tw': 'Êµ™Ë≤ªÊôÇÈñì'
    },
    exhausted: {
        'en': 'exhausted',
        'zh-cn': 'Áñ≤ÊÉ´',
        'zh-tw': 'Áñ≤ÊÜä'
    },
    risky_behavior: {
        'en': 'risky behavior',
        'zh-cn': 'Âç±Èô©Ë°å‰∏∫',
        'zh-tw': 'Âç±Èö™Ë°åÁÇ∫'
    },
    // Êõ¥Â§öÁöÑidÂíåÂØπÂ∫îÁöÑÁøªËØë
};

// ÁøªËØëÂáΩÊï∞ÔºåÊé•Êî∂‰∏§‰∏™ÂèÇÊï∞ÔºöËØ≠Ë®ÄÂíåid
function translate(language, id) {
    const translation = i18n[id];
    if (translation) {
        return translation[language] || translation.en; // Â¶ÇÊûúÂΩìÂâçËØ≠Ë®ÄÊ≤°ÊúâÁøªËØëÔºåËøîÂõûËã±Êñá
    } else {
        return id; // Â¶ÇÊûúÊâæ‰∏çÂà∞idÔºåËøîÂõûidÊú¨Ë∫´
    }
}

// ÂàùÂßãÂåñÊï∞ÊçÆÂà∞Êú¨Âú∞
function initializeLocalStorageKey(key, initialValue) {
    if (localStorage.getItem(key) === null) {
        localStorage.setItem(key, initialValue);
    }
}

// ÂÜôÂÖ•Êï∞ÊçÆÂà∞Êú¨Âú∞
function writeToLocalStorage(key, value) {
    localStorage.setItem(key, value);
}

// ËØªÂèñÊú¨Âú∞Êï∞ÊçÆ
function readFromLocalStorage(key) {
    return localStorage.getItem(key);
}

// ÂæóÂà∞ÈöèÊú∫Êï∞
function getRandomValueInRange(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}


// Ëé∑Âèñ‰ªäÂ§©ÁöÑÊó•ÊúüÂπ∂Ê†ºÂºèÂåñ‰∏∫Â≠óÁ¨¶‰∏≤ÔºàÂ¶Ç "YYYY-MM-DD"Ôºâ
function getTodayDate() {
    const today = new Date();
    const year = today.getFullYear();
    const month = String(today.getMonth() + 1).padStart(2, '0'); // Êúà‰ªΩ‰ªé0ÂºÄÂßãÔºåÈúÄË¶ÅÂä†1
    const day = String(today.getDate()).padStart(2, '0'); // Ëé∑ÂèñÊó•ÊúüÂπ∂Á°Æ‰øùÊòØ‰∏§‰ΩçÊï∞
    return `${year}-${month}-${day}`;
}

// Ëé∑ÂèñÊò®Â§©ÁöÑÊó•ÊúüÂπ∂Ê†ºÂºèÂåñ‰∏∫Â≠óÁ¨¶‰∏≤ÔºàÂ¶Ç "YYYY-MM-DD"Ôºâ
function getYesterdayDate() {
    const yesterday = new Date();
    yesterday.setDate(yesterday.getDate() - 1); // Â∞ÜÊó•ÊúüÂáèÂéª‰∏ÄÂ§©
    const year = yesterday.getFullYear();
    const month = String(yesterday.getMonth() + 1).padStart(2, '0'); // Êúà‰ªΩ‰ªé0ÂºÄÂßãÔºåÈúÄË¶ÅÂä†1
    const day = String(yesterday.getDate()).padStart(2, '0'); // Ëé∑ÂèñÊó•ÊúüÂπ∂Á°Æ‰øùÊòØ‰∏§‰ΩçÊï∞
    return `${year}-${month}-${day}`;
}

// ÂÆö‰πâÔºöÈÄÇÂêàÂπ≤‰ªÄ‰πàÔºå‰∏çÈÄÇÂêàÂπ≤‰ªÄ‰πà
let luckyForItems;
let unluckyForItems;

// ÈöèÊú∫ÂÜÖÂÆπÔºölucky_for , unlucky_for
const dataItemsCollection = {
    // ÈÄÇÂêàÂÅö‰ªÄ‰πàÔºöÊï∞ÊçÆÁªìÊûÑÊòØÔºöname,link --->nameË°®Á§∫Â±ïÁ§∫Âú®È°µÈù¢‰∏äÁöÑÂÜÖÂÆπÔºålinkÊòØÁªôÂà∞<a>ÂÖÉÁ¥†ÁöÑhref
    luckyForItems: [
        { name: 'game', link: 'game' },
        { name: 'happy', link: 'game/happy_worship' },
        { name: 'exercise', link: 'game/wooden_fish' },
        { name: 'show_love', link: 'secret/bullet' },
        { name: 'read', link: 'topic' },
        { name: 'dating', link: 'topic' },
        { name: 'laugh', link: 'rank' },
        { name: 'rich', link: 'secret' },
        { name: 'match', link: 'game/flying_book' },
        { name: 'healthy', link: 'topic' }
    ],
    // ‰∏çÈÄÇÂêàÂÅö‰ªÄ‰πàÔºöÊï∞ÊçÆÁªìÊûÑÊòØÔºöname,link --->nameË°®Á§∫Â±ïÁ§∫Âú®È°µÈù¢‰∏äÁöÑÂÜÖÂÆπÔºåËøôÈáåÁöÑlinkÊó†ÊïàÔºåÂõ†‰∏∫Ê≤°Áî®‰∏ä
    unluckyForItems: [
        { name: 'cry', link: 'cry' },
        { name: 'sad', link: 'sad' },
        { name: 'disappointment', link: 'disappointment' },
        { name: 'poor', link: 'poor' },
        { name: 'fight', link: 'fight' },
        { name: 'squabble', link: 'squabble' },
        { name: 'mad', link: 'mad' },
        { name: 'waste_time', link: 'waste_time' },
        { name: 'exhausted', link: 'exhausted' },
        { name: 'risky_behavior', link: 'risky_behavior' }
    ],
    
};


// ÁîüÊàêÈöèÊú∫Áî®Êà∑ÁöÑ‰ø°ÊÅØ
function generateRandomUsers() {
    const userLuckyPoint = parseInt(readFromLocalStorage('total_lucky_point'));
    const userLevel = parseInt(readFromLocalStorage('user_level'));
    const userGameTime = parseInt(readFromLocalStorage('game_time'));
    const userReadTime = parseInt(readFromLocalStorage('read_time'));

    const enNames = ['Tom and Jery', '_feelgood', 'John2469', 'aimlobo_username', 'Rojin_04', 'Jessica', 'Linda here', 'James go go', 'love and happiness', 'nobody342'];
    const zhCnNames = ['Â∞èÂ∞è', 'Â†ïËêΩÁöÑÁ•ûËØù', 'ËêùÂçú‰ªî', 'aimlobo_Áî®Êà∑Âêç', 'ÁÉüËçâÁöÑÊÆãÈ¶ô', 'ÊøÄÊµäÊâ¨Ê∏Ö', 'ÈªÑÈùôfen', 'ÊúïÂæàËêå', '‰ΩõÊú¨ÊòØÂñÑ', 'Â•ΩËøêluckyü•∞'];
    const zhTwNames = ['‰∫åÂçÅÂõõÊ©ãÊòéÊúàÂ§ú', 'Â§©ÈÅ∏‰πã‰∫∫', 'ÊàëÊÑõÂêÉÂèâÁáí', 'aimlobo_Áî®Êà∂Âêç', 'Ê∫´ÊüîÊ≥õÊø´', 'Èö®‰æøÂØ´ÁöÑÂêçÂ≠ó', 'ÊúâÊúãËá™ÈÅ†Êñπ‰æÜ', 'Â•Ω‰∫ãÊàêÈõô', 'Êµ™Êº´ÊòØ‰∏ÄÁ®ÆÁîüÊ¥ª', 'Ë∂ôÈ∫ó'];
    const avatars = ['üèñÔ∏è', 'üèúÔ∏è', 'üèîÔ∏è', 'üë©‚Äçüíº', 'üßë‚Äçüåæ', 'üßù', 'ü¶Å', 'üê∂', 'üê≥', 'üê≤', 'üêØ', 'üß∏'];

    const descriptions = [
        // Ëã±ÊñáÊèèËø∞
        "Love for all, hatred for none.",
        "Change the world by being yourself.",
        "Every moment is a fresh beginning.",
        "Never regret anything that made you smile.",
        "Die with memories, not dreams.",
        "Aspire to inspire before we expire.",
        "Whatever you do, do it well.",
        "What we think, we become.",
        "All limitations are self-imposed.",
        "Problems are not stop signs.",
        // ÁÆÄ‰Ωì‰∏≠ÊñáÊèèËø∞
        "ÊàëÁà±Ëá™Áî±ÂíåÊ¢¶ÊÉ≥",
        "ÁîüÊ¥ªÂÖÖÊª°‰∫ÜÊÉäÂñú",
        "ÂøÉÊÄÄÊÑüÊÅ©ÔºåÁîüÊ¥ªÊõ¥ÁæéÂ•Ω",
        "Âø´‰πêÊòØ‰∏ÄÁßçÈÄâÊã©",
        "Â•ãÊñóÊòØÊàêÂäüÁöÑÂîØ‰∏ÄÈÄîÂæÑ",
        "Âπ∏Á¶èÂú®‰∫éËøΩÊ±Ç",
        "Ê¥ªÂú®ÂΩì‰∏ã",
        "Á¨ëÂØπ‰∫∫Áîü",
        "ÂùöÊåÅÂ∞±ÊòØËÉúÂà©",
        "ÊØè‰∏ÄÂ§©ÈÉΩÊòØÊñ∞ÁöÑÂºÄÂßã",
        // ÁπÅ‰Ωì‰∏≠ÊñáÊèèËø∞
        "ÁîüÊ¥ªÊòØÂÄãÂ•áËπü",
        "ÂøÉÊÉ≥‰∫ãÊàê",
        "Áü•Ë∂≥Â∏∏Ê®Ç",
        "Âä™Âäõ‰∏çÊáàÔºåÊàêÂ∞±Êú™‰æÜ",
        "ÂøÉÊÖãÊ±∫ÂÆö‰∏ÄÂàá",
        "ÁÜ±ÊÑõÁîüÊ¥ª",
        "ÂæÆÁ¨ëÈù¢Â∞çÊØè‰∏ÄÂ§©",
        "‰øùÊåÅÊ®ÇËßÄ",
        "ÁèçÊÉúÁúºÂâç‰∫∫",
        "ÂøÉÊúâÂ§öÂ§ßÔºåËàûÂè∞Â∞±ÊúâÂ§öÂ§ß"
    ];

    const users = [];

    function getRandomAvatar() {
        const randomIndex = Math.floor(Math.random() * avatars.length);
        return avatars[randomIndex];
    }

    function getRandomDescription() {
        const randomIndex = Math.floor(Math.random() * descriptions.length);
        return descriptions[randomIndex];
    }

    function generateUser(name, id) {
        return {
            user_id: id,
            user_name: name,
            user_avatar: getRandomAvatar(),
            user_description: getRandomDescription(),
            total_lucky_point: 0,
            user_level: 0,
            game_time: 0,
            read_time: 0
        };
    }

    function getRandomValueInRange(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    // ‰∏ÄÈÉ®ÂàÜÁî®Êà∑ÁöÑÊï∞ÊçÆÂ§ß‰∫éÂΩìÂâçÁî®Êà∑ÁöÑÂÄº
    function assignValuesGreaterThan(user) {
        user.total_lucky_point = getRandomValueInRange(500, 5000);
        user.user_level = getRandomValueInRange(50, 150);
        user.game_time = getRandomValueInRange(150, 1000);
        user.read_time = getRandomValueInRange(150, 600);
    }

    // ‰∏ÄÈÉ®ÂàÜÁî®Êà∑ÁöÑÊï∞ÊçÆÂ∞è‰∫éÂΩìÂâçÁî®Êà∑ÁöÑÂÄº
    function assignValuesLessThan(user) {
        // Á°Æ‰øù userLuckyPoint, userLevel, userGameTime, userReadTime Ëá≥Â∞ë‰∏∫ 1
        const min = 1;
        user.total_lucky_point = getRandomValueInRange(min, Math.max(120, userLuckyPoint - 1));
        user.user_level = getRandomValueInRange(min, Math.max(55, userLevel - 1));
        user.game_time = getRandomValueInRange(min, Math.max(230, userGameTime - 1));
        user.read_time = getRandomValueInRange(min, Math.max(110, userReadTime - 1));
    }

    let idCounter = 1;

    enNames.forEach(name => {
        users.push(generateUser(name, idCounter++));
    });

    zhCnNames.forEach(name => {
        users.push(generateUser(name, idCounter++));
    });

    zhTwNames.forEach(name => {
        users.push(generateUser(name, idCounter++));
    });

    // Êâì‰π±Áî®Êà∑Êï∞ÁªÑ‰ª•Á°Æ‰øùÂêçÂ≠óÂíåÂ§¥ÂÉèÂàÜÂ∏ÉÈöèÊú∫
    for (let i = users.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [users[i], users[j]] = [users[j], users[i]];
    }

    // ÂàÜÈÖçÊï∞ÂÄºÔºö‰∏Ä‰∏™ÈöèÊú∫Êï∞Ôºà5-10Ôºâ
    const randomNumber10 = getRandomValueInRange(5, 10);
    users.slice(0, randomNumber10).forEach(assignValuesGreaterThan);
    users.slice(randomNumber10).forEach(assignValuesLessThan);

    writeToLocalStorage('random_users', JSON.stringify(users));
}


// Êõ¥Êñ∞ÈöèÊú∫Áî®Êà∑ÁöÑ‰ø°ÊÅØ
function updateRandomUsersInfo() {
    const users = JSON.parse(readFromLocalStorage('random_users'));

    users.slice(0, 30).forEach(user => {
        user.total_lucky_point += getRandomValueInRange(100, 800);
        user.user_level += getRandomValueInRange(1, 3);
        user.game_time += getRandomValueInRange(50, 200);
        user.read_time += getRandomValueInRange(10, 50);
    });

    writeToLocalStorage('random_users', JSON.stringify(users));
}

// ÂàùÂßãÂåñÁî®Êà∑Á≥ªÁªüÔºå Ê£ÄÊµãÊòØÂê¶ÂàùÊ¨°ÁôªÈôÜÁΩëÁ´ôÔºåÂ¶ÇÊûúÊòØÁöÑËØùÔºåÂ∞±ÂàùÂßãÂåñÂÄºÔºöÂπ∏ËøêÁßØÂàÜÔºåÁî®Êà∑Â§¥ÂÉèÔºåÁî®Êà∑ÂêçÔºåÁ≠æÂêçÔºåÁîüÊó•ÔºåÁ≠âÁ∫ß -- Ëøô‰∫õÂÜÖÂÆπÁöÑÊõ¥Êñ∞Âú®my.jsÈáåËÆæÁΩÆ
function initializeUserSystem() {
    // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂ≠òÂú® lucky_for_items Âíå unlucky_for_items
    let luckyItems = readFromLocalStorage('lucky_for_items');
    let unluckyItems = readFromLocalStorage('unlucky_for_items');

    if (!luckyItems || !unluckyItems) {
        // ‰∏çÂ≠òÂú®ÂàôËøõË°åÂàùÂßãÂåñ
        initializeLocalStorageKey('lucky_for_items', getRandomDataItems('luckyForItems', 3, 'lucky_for_items')); //ÈÄÇÂêàÂπ≤‰ªÄ‰πà
        initializeLocalStorageKey('unlucky_for_items', getRandomDataItems('unluckyForItems', 3, 'unlucky_for_items')); //‰∏çÈÄÇÂêàÂπ≤‰ªÄ‰πà
    }

    // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÂ≠òÂú® random_users --Áî®Âú®rank È°µÈù¢
    let randomUsers = readFromLocalStorage('random_users');

    if (!randomUsers) {
        // ‰∏çÂ≠òÂú®ÂàôËøõË°åÂàùÂßãÂåñ
        initializeLocalStorageKey('random_users', generateRandomUsers()); 
    }

    // Áî®Êà∑Á≥ªÁªüÔºåÂπ∏ËøêÁßØÂàÜÔºåÁî®Êà∑Â§¥ÂÉèÔºåÁî®Êà∑ÂêçÔºåÁ≠æÂêçÔºåÁîüÊó•ÔºåÁ≠âÁ∫ß -- ÁßØÂàÜËÆ∞ÂΩïÂæÖÊ∑ªÂä†
    initializeLocalStorageKey('total_lucky_point', 10);//Ëµ†ÈÄÅ10‰∏™ÁßØÂàÜ
    initializeLocalStorageKey('user_avatar', 'üéÉ');
    initializeLocalStorageKey('user_name', 'aimlobo_' + translate(getLanguageFromUrl(), 'username'));
    initializeLocalStorageKey('user_description', translate(getLanguageFromUrl(), 'personalized_signature'));
    initializeLocalStorageKey('user_birthday', getYesterdayDate()); //ÂàùÂßãÂåñ‰∏∫Êò®Â§©Ôºå‰∏∫‰ª•ÂêéÁöÑÁîüÊó•ÂÅöÂáÜÂ§á
    initializeLocalStorageKey('user_check_in_today', 0); // ÂàùÂßãÂåñÁî®Êà∑Â∞öÊú™Á≠æÂà∞Ôºå0Ë°®Á§∫Ê≤°ÊúâÔºå1‰ª£Ë°®‰ªäÊó•Â∑≤ÁªèÁ≠æÂà∞
    initializeLocalStorageKey('last_check_in_date', ''); // ÂàùÂßãÂåñ‰∏äÊ¨°Á≠æÂà∞Êó•Êúü
    initializeLocalStorageKey('last_login_in_date', getTodayDate()); // ÂàùÂßãÂåñ‰∏äÊ¨°ÁôªÂΩïÊó•Êúü
    initializeLocalStorageKey('user_level', 0);
    initializeLocalStorageKey('game_time', 0); //Ê∏∏ÊàèÊ¨°Êï∞
    initializeLocalStorageKey('read_time', 0); //ÈòÖËØªÊ¨°Êï∞
    initializeLocalStorageKey('post_like', getRandomValueInRange(10000, 100000)); //ÊñáÁ´†Ëé∑ËµûÊï∞Èáè - page topic
    initializeLocalStorageKey('visitor_number', getRandomValueInRange(2000, 5000)); //ËÆøÂÆ¢Êï∞Èáè - page topic
    
}

initializeUserSystem();

// Âà∑Êñ∞È°µÈù¢‰∏äÁöÑÁî®Êà∑Â§¥ÂÉè
function updatePageUserAvatar() {
    const varUserAvatar =document.querySelector('.var_user_avatar');

    if (varUserAvatar) {
        varUserAvatar.textContent = readFromLocalStorage('user_avatar');
    }
    
}

// Âà∑Êñ∞È°µÈù¢‰∏äÁöÑÁî®Êà∑ÂêçÁß∞
function updatePageUserName() {
    const varUserName =document.querySelector('.var_user_name');

    if (varUserName) {
        varUserName.textContent = readFromLocalStorage('user_name');
    }
}

// Âà§Êñ≠Áî®Êà∑Âêç
function isUserDuoDiu() {
    const userName = readFromLocalStorage('user_name');
    return userName === 'duo duo ‚ù§Ô∏è diu diu';
}

// È¶ñÈ°µÂºπÂá∫Áé´Áë∞: È¶ñÂÖàÂà§Êñ≠Áî®Êà∑ÂêçÔºåÁÑ∂ÂêéÊ®°ÊãüÁÇπÂáªÂÖÉÁ¥†
showLoveToDuoDuo();
function showLoveToDuoDuo() {
    

    if (isUserDuoDiu()) {
        const roseIcon = document.querySelector('.rose_icon');

        if (roseIcon) {
            roseIcon.click();
        }
    }
}


// Êõ¥Êñ∞Âπ∏ËøêÂÄº
function updateTotalLuckyPoint(value) {
    // ËØªÂèñÂπ∂ËΩ¨Êç¢‰∏∫ÊµÆÁÇπÊï∞
    let totalLuckyPoint = parseFloat(readFromLocalStorage('total_lucky_point'));

    // Â¶ÇÊûúËØªÂèñÂ§±Ë¥•ÔºåÂàùÂßãÂåñ‰∏∫0
    if (isNaN(totalLuckyPoint)) {
        totalLuckyPoint = 0;
    }

    // Êõ¥Êñ∞Âπ∂Á°Æ‰øùÂ∞èÊï∞ÁÇπÂêéÂè™Êúâ‰∏Ä‰ΩçÊï∞ÁöÑÁ≤æÂ∫¶
    totalLuckyPoint = (totalLuckyPoint + value).toFixed(1);

    // ÂÜôÂõû
    writeToLocalStorage('total_lucky_point', parseFloat(totalLuckyPoint));
}


// Âà∑Êñ∞È°µÈù¢‰∏äÁöÑÂπ∏ËøêÂÄº
function updatePageTotalLuckyPoint() {
    const varTotalLuckyPoint =document.querySelector('.var_total_lucky_point');
    varTotalLuckyPoint.textContent = readFromLocalStorage('total_lucky_point');
}

// Êõ¥Êñ∞Á≠âÁ∫ß
function updateUserLevel(value) {
    
    // ËØªÂèñ
    let userLevel = parseInt(readFromLocalStorage('user_level'));

    // Êõ¥Êñ∞
    userLevel += value;

    // ÂÜôÂõû
    writeToLocalStorage('user_level', userLevel);
}

// Âà∑Êñ∞È°µÈù¢‰∏äÁöÑÁ≠âÁ∫ß
function updatePageUserLevel() {
    const varUserLevel =document.querySelector('.var_user_level');

    if (varUserLevel) {
        varUserLevel.textContent = readFromLocalStorage('user_level');
    }
    
}

// Êõ¥Êñ∞Ê∏∏ÊàèÊ¨°Êï∞
function updateGameTime(value) {

    // ËØªÂèñ
    let gameTime = parseInt(readFromLocalStorage('game_time'));

    // Êõ¥Êñ∞
    gameTime += value;

    // ÂÜôÂõû
    writeToLocalStorage('game_time', gameTime);

}

// Âà∑Êñ∞È°µÈù¢‰∏äÁöÑÊ∏∏ÊàèÊ¨°Êï∞
function updatePageUserGameTime() {
    const varGameTime =document.querySelector('.var_game_time');

    if (varGameTime) {
        varGameTime.textContent = readFromLocalStorage('game_time');
    }
    
}

// Êõ¥Êñ∞ÈòÖËØªÊ¨°Êï∞
function updateReadTime(value) {

    // ËØªÂèñ
    let readTime = parseInt(readFromLocalStorage('read_time'));

    // Êõ¥Êñ∞
    readTime += value;

    // ÂÜôÂõû
    writeToLocalStorage('read_time', readTime);
}

// Âà∑Êñ∞È°µÈù¢‰∏äÁöÑÈòÖËØªÊ¨°Êï∞
function updatePageUserReadTime() {
    const varReadTime =document.querySelector('.var_read_time');

    if (varReadTime) {
        varReadTime.textContent = readFromLocalStorage('read_time');
    }
    
}

// Êõ¥Êñ∞ÊñáÁ´†Ëé∑ËµûÊï∞Èáè
function updatePostLike(value) {

    // ËØªÂèñ
    let postLike = parseInt(readFromLocalStorage('post_like'));

    // Êõ¥Êñ∞
    postLike += value;

    // ÂÜôÂõû
    writeToLocalStorage('post_like', postLike);
}

// Âà∑Êñ∞È°µÈù¢‰∏äÁöÑÊñáÁ´†Ëé∑ËµûÊï∞Èáè
function updatePagePostLike() {
    const varPostLike =document.querySelector('.var_post_like');
    varPostLike.textContent = readFromLocalStorage('post_like');
}

// Êõ¥Êñ∞ËÆøÂÆ¢Êï∞Èáè
function updateVisitorNumber(value) {

    // ËØªÂèñ
    let visitorNumber = parseInt(readFromLocalStorage('visitor_number'));

    // Êõ¥Êñ∞
    visitorNumber += value;

    // ÂÜôÂõû
    writeToLocalStorage('visitor_number', visitorNumber);
}

// Âà∑Êñ∞È°µÈù¢‰∏äÁöÑËÆøÂÆ¢Êï∞Èáè
function updatePageVisitorNumber() {
    const varVisitorNumber =document.querySelector('.var_visitor_number');
    varVisitorNumber.textContent = readFromLocalStorage('visitor_number');
}

// ÂÜôÂÖ•‰∫ã‰ª∂Âà∞Êú¨Âú∞
function writeEventLog(eventType, eventName, value) {
    // ÊûÑÈÄ†Êú¨Âú∞Â≠òÂÇ®ÁöÑÈîÆÂêç
    const storageKey = `eventLog${eventType}`;

    // ËØªÂèñÁé∞ÊúâÁöÑÊó•ÂøóÊï∞ÊçÆ
    let eventLog = localStorage.getItem(storageKey);

    // Â¶ÇÊûú‰∏çÂ≠òÂú®ÔºåÂàôÂàùÂßãÂåñ‰∏∫‰∏Ä‰∏™Á©∫Êï∞ÁªÑ
    if (eventLog === null) {
        eventLog = [];
    } else {
        // Ëß£ÊûêÁé∞ÊúâÁöÑÊó•ÂøóÊï∞ÊçÆ
        eventLog = JSON.parse(eventLog);
    }

    // Ëé∑ÂèñÂΩìÂâçÊó∂Èó¥
    const eventTime = new Date().toISOString();

    // ÂàõÂª∫Êñ∞‰∫ã‰ª∂ÂØπË±°
    const newEvent = [eventName, value, eventTime];

    // Â∞ÜÊñ∞‰∫ã‰ª∂Ê∑ªÂä†Âà∞Êó•ÂøóÊï∞ÁªÑ‰∏≠
    eventLog.push(newEvent);

    // Â∞ÜÊõ¥Êñ∞ÂêéÁöÑÊó•ÂøóÊï∞ÁªÑÂ≠òÂõûLocal Storage
    localStorage.setItem(storageKey, JSON.stringify(eventLog));
}

// ËÆ∞ÂΩï‰∫ã‰ª∂--Âπ∏ËøêÁßØÂàÜ
function writeEventLogLuckyPoint(eventName, luckyPoint) {
    writeEventLog('LuckyPoint', eventName, luckyPoint);
}

// ËÆ∞ÂΩï‰∫ã‰ª∂--Áî®Êà∑Á≠âÁ∫ß
function writeEventLogUserLevel(eventName, level) {
    writeEventLog('UserLevel', eventName, level);
}

// ËÆ∞ÂΩï‰∫ã‰ª∂--Ê∏∏ÊàèÊ¨°Êï∞
function writeEventLogGameTime(eventName, gameTime) {
    writeEventLog('GameTime', eventName, gameTime);
}

// ËÆ∞ÂΩï‰∫ã‰ª∂--ÈòÖËØªÊ¨°Êï∞
function writeEventLogReadTime(eventName, readTime) {
    writeEventLog('ReadTime', eventName, readTime);
}




// Âà§Êñ≠È°µÈù¢ËØ≠Ë®Ä
function getLanguageFromUrl() {
    const url = window.location.href;
    
    if (url.includes('/en/')) {
        return 'en';
    } else if (url.includes('/zh-cn/')) {
        return 'zh-cn';
    } else if (url.includes('/zh-tw/')) {
        return 'zh-tw';
    } else {
        return 'unknown'; // Â¶ÇÊûú‰∏çÂåÖÂê´‰ªª‰ΩïÂ∑≤Áü•ÁöÑËØ≠Ë®ÄË∑ØÂæÑÔºåÂàôËøîÂõû'unknown'
    }
}




// ÂæóÂà∞ÈöèÊú∫ÂÜÖÂÆπ,Êé•Êî∂ÁöÑÂèÇÊï∞ÊòØÔºöÊï∞ÊçÆÈõÜÁöÑÂêçÁß∞ÔºåË¶ÅËé∑ÂæóÂá†‰∏™ÈöèÊú∫ÂÄºÔºåÂ≠òÂà∞localÁöÑkeyÂêçÁß∞
function getRandomDataItems(dataItemsName, count, key) {
    const dataItems = dataItemsCollection[dataItemsName];
    if (!dataItems) {
        throw new Error(`Data items array named "${dataItemsName}" does not exist`);
    }

    if (count > dataItems.length) {
        throw new Error('Requested more unique data items than available');
    }

    const selectedItems = [];
    const remainingItems = [...dataItems]; // ÂàõÂª∫Êï∞ÊçÆÈ°πÁöÑÂâØÊú¨

    while (selectedItems.length < count) {
        const randomIndex = Math.floor(Math.random() * remainingItems.length);
        const [selectedItem] = remainingItems.splice(randomIndex, 1); // ‰ªéÂâ©‰ΩôÊï∞ÊçÆÈ°π‰∏≠ÁßªÈô§ÈÄâ‰∏≠È°π
        selectedItems.push(selectedItem);
    }

    // Â∞ÜÁªìÊûúÊï∞ÁªÑÂÜôÂÖ• LocalStorage
    writeToLocalStorage(key, JSON.stringify(selectedItems));

    return selectedItems;
}

// topic single È°µÈù¢Ôºåback to top
backToTopInSingle();
function backToTopInSingle() {
// Ëé∑ÂèñÊåâÈíÆ
var backToTopBtn = document.getElementById("backToTopBtn");

if (backToTopBtn) {
    // ÂΩìÁî®Êà∑Âêë‰∏ãÊªöÂä® 100px Êó∂ÊòæÁ§∫ÊåâÈíÆ
    window.onscroll = function() {
        scrollFunction();
    };

    function scrollFunction() {
        if (document.body.scrollTop > 100 || document.documentElement.scrollTop > 100) {
            backToTopBtn.style.display = "block";
        } else {
            backToTopBtn.style.display = "none";
        }
    }

    // ÁÇπÂáªÊåâÈíÆÂêéÊªöÂä®Âà∞È°∂ÈÉ®
    backToTopBtn.onclick = function() {
        scrollToTop();
    };

    function scrollToTop() {
        window.scrollTo({top: 0, behavior: 'smooth'});
    }
}
}




// ÊâìÂºÄÁΩëÁ´ôÊó∂ÈúÄË¶ÅÊõ¥Êñ∞ÁöÑÂÜÖÂÆπ(ÊØèÂ§©): È¶ñÂÖàÊü•ÁúãÊï∞ÊçÆÊòØÂê¶‰∏äÊ¨°ÁôªÂΩïÊòØ‰ªäÂ§©ÔºåÂ¶ÇÊûúÊòØÔºåÂ∞±‰∏çÊõ¥Êñ∞ÂÜÖÂÆπÔºå‰∏çÊòØÁöÑËØùÔºåÂ∞±Êõ¥Êñ∞ÂÜÖÂÆπÔºåÁÑ∂ÂêéÊõ¥Êñ∞‰∏äÊ¨°ÁôªÂΩïÊó•Êúü‰∏∫‰ªäÂ§©



// Êü•ÁúãÊï∞ÊçÆÊòØÂê¶‰∏äÊ¨°ÁôªÂΩïÊòØ‰ªäÂ§©ÔºåËøîÂõûture or false
function isLastLogInDateIsToday() {
    const lastLogInDate = readFromLocalStorage('last_login_in_date');
    const today = getTodayDate(); 
    return lastLogInDate === today;
}

// Êõ¥Êñ∞ÈúÄË¶ÅÊõ¥Êñ∞ÁöÑÂÜÖÂÆπÔºàÊØèÂ§©Á¨¨‰∏ÄÊ¨°ÁôªÂΩïÔºâ
function updateWhenLogInToday() {

    if (isLastLogInDateIsToday()) {
        // Êó†ÈúÄÊõ¥Êñ∞ÂÜÖÂÆπ
    } else {

        // ÁîüÊàê‰ªäÂ§©ÈÄÇÂêàÂÅö‰ªÄ‰πàÔºå‰∏çÈÄÇÂêàÂÅö‰ªÄ‰πà
        initializeLocalStorageKey('lucky_for_items', getRandomDataItems('luckyForItems', 3, 'lucky_for_items')); 
        initializeLocalStorageKey('unlucky_for_items', getRandomDataItems('unluckyForItems', 3, 'unlucky_for_items')); 

        // Êõ¥Êñ∞ÈöèÊú∫Áî®Êà∑ÁöÑ‰ø°ÊÅØÔºöÂπ∏ËøêÂÄºÔºåÁ≠âÁ∫ßÔºåÊ∏∏ÊàèÊ¨°Êï∞ÔºåÈòÖËØªÊ¨°Êï∞
        updateRandomUsersInfo();

        // Êõ¥Êñ∞ÊñáÁ´†Ëé∑ËµûÊï∞Èáè page topic list
        updatePostLike(getRandomValueInRange(1500,4000));

        // Êõ¥Êñ∞ËÆøÂÆ¢Êï∞Èáè page topic list
        updateVisitorNumber(getRandomValueInRange(500,1000));


        // Êõ¥Êñ∞ÊúÄÂêé‰∏ÄÊ¨°ÁôªÂΩïÊó•Êúü
        writeToLocalStorage('last_login_in_date', getTodayDate());
    }

}

updateWhenLogInToday();

// Êõ¥Êñ∞ÈúÄË¶ÅÊõ¥Êñ∞ÁöÑÂÜÖÂÆπÔºàÊØèÊ¨°Êìç‰Ωú‰πãÂêéÔºâ
function updateWhenNow() {

    //Âà∑Êñ∞Áî®Êà∑Â§¥ÂÉè
    updatePageUserAvatar();

    //Âà∑Êñ∞Áî®Êà∑ÂêçÁß∞
    updatePageUserName();

    //Âà∑Êñ∞Ê∏∏ÊàèÊ¨°Êï∞
    updatePageUserGameTime();

    //Âà∑Êñ∞ÈòÖËØªÊ¨°Êï∞
    updatePageUserReadTime();


}


updateWhenNow();


// È¶ñÈ°µÊõ¥Êñ∞ÁîµÂ≠êÊó∂Èíüdigital-clock
function updateClockElements(selector, value) {
    document.querySelector(selector).innerHTML = value;
}

function formatTimeUnit(unit) {
    return unit < 10 ? "0" + unit : unit;
}

function getFormattedDate(today) {
    return {
        dayName: today.toLocaleDateString(getLanguageFromUrl(), { weekday: "short" }),
        monthName: today.toLocaleDateString(getLanguageFromUrl(), { month: "2-digit" }),
        dayNum: today.toLocaleDateString(getLanguageFromUrl(), { day: "2-digit" }),
        year: today.getFullYear()
    };
}

function digitalClock() {
    var today = new Date();
    var hours = today.getHours();
    var minutes = formatTimeUnit(today.getMinutes());
    var seconds = formatTimeUnit(today.getSeconds());
    var period = hours >= 12 ? "PM" : "AM";
    hours = formatTimeUnit(hours);

    var { dayName, monthName, dayNum, year } = getFormattedDate(today);

    updateClockElements(".hours", hours);
    updateClockElements(".minutes", minutes);
    updateClockElements(".seconds", seconds);
    updateClockElements(".period", period);
    updateClockElements(".month-name", monthName);
    updateClockElements(".day-name", dayName);
    updateClockElements(".day-num", dayNum);
    updateClockElements(".year", year);
}

function initializeDigitalClock() {
    if (document.querySelector('.digital-clock')) {
        digitalClock();
        setInterval(digitalClock, 1000);
    }
}

// Call the function to initialize the digital clock
initializeDigitalClock();




